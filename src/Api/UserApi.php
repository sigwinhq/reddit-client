<?php

declare(strict_types=1);

/*
 * This file is part of the Sigwin project.
 *
 * (c) sigwin.hr
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Sigwin\RedditClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Sigwin\RedditClient\ApiException;
use Sigwin\RedditClient\Configuration;
use Sigwin\RedditClient\HeaderSelector;
use Sigwin\RedditClient\ObjectSerializer;

/**
 * UserApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
final class UserApi
{
    /**
     * @var ClientInterface
     */
    private $client;

    /**
     * @var Configuration
     */
    private $config;

    /**
     * @var HeaderSelector
     */
    private $headerSelector;

    /**
     * @var int Host index
     */
    private $hostIndex;

    /** @var string[] */
    public const contentTypes = [
        'getAbout' => [
            'application/json',
        ],
        'getSaved' => [
            'application/json',
        ],
        'me' => [
            'application/json',
        ],
    ];

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getAbout.
     *
     * Returns the identity of a user.
     *
     * @param string $username    username (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAbout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function getAbout($username, string $contentType = self::contentTypes['getAbout'][0]): \Sigwin\RedditClient\Model\User
    {
        [$response] = $this->getAboutWithHttpInfo($username, $contentType);

        return $response;
    }

    /**
     * Operation getAboutWithHttpInfo.
     *
     * Returns the identity of a user.
     *
     * @param string $username    (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAbout'] to see the possible values for this operation
     *
     * @return array of \Sigwin\RedditClient\Model\User, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function getAboutWithHttpInfo($username, string $contentType = self::contentTypes['getAbout'][0]): array
    {
        $request = $this->getAboutRequest($username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Sigwin\RedditClient\Model\User',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            return $this->handleResponseWithDataType(
                '\Sigwin\RedditClient\Model\User',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sigwin\RedditClient\Model\User',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getAboutAsync.
     *
     * Returns the identity of a user.
     *
     * @param string $username    (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAbout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getAboutAsync($username, string $contentType = self::contentTypes['getAbout'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getAboutAsyncWithHttpInfo($username, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getAboutAsyncWithHttpInfo.
     *
     * Returns the identity of a user.
     *
     * @param string $username    (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAbout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getAboutAsyncWithHttpInfo($username, string $contentType = self::contentTypes['getAbout'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Sigwin\RedditClient\Model\User';
        $request = $this->getAboutRequest($username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'getAbout'.
     *
     * @param string $username    (required)
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['getAbout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getAboutRequest($username, string $contentType = self::contentTypes['getAbout'][0]): Request
    {
        // verify the required parameter 'username' is set
        if ($username === null || (\is_array($username) && \count($username) === 0)) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling getAbout');
        }

        $resourcePath = '/user/{username}/about';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{username}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (mb_stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSaved.
     *
     * Get user saved things
     *
     * @param string      $username    username (required)
     * @param null|string $after       after (optional)
     * @param null|string $before      before (optional)
     * @param null|int    $limit       limit (optional, default to 25)
     * @param string      $contentType The value for the Content-Type header. Check self::contentTypes['getSaved'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function getSaved($username, $after = null, $before = null, $limit = 25, string $contentType = self::contentTypes['getSaved'][0]): \Sigwin\RedditClient\Model\ListingEnvelope
    {
        [$response] = $this->getSavedWithHttpInfo($username, $after, $before, $limit, $contentType);

        return $response;
    }

    /**
     * Operation getSavedWithHttpInfo.
     *
     * Get user saved things
     *
     * @param string      $username    (required)
     * @param null|string $after       (optional)
     * @param null|string $before      (optional)
     * @param null|int    $limit       (optional, default to 25)
     * @param string      $contentType The value for the Content-Type header. Check self::contentTypes['getSaved'] to see the possible values for this operation
     *
     * @return array of \Sigwin\RedditClient\Model\ListingEnvelope, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function getSavedWithHttpInfo($username, $after = null, $before = null, $limit = 25, string $contentType = self::contentTypes['getSaved'][0]): array
    {
        $request = $this->getSavedRequest($username, $after, $before, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Sigwin\RedditClient\Model\ListingEnvelope',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            return $this->handleResponseWithDataType(
                '\Sigwin\RedditClient\Model\ListingEnvelope',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sigwin\RedditClient\Model\ListingEnvelope',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation getSavedAsync.
     *
     * Get user saved things
     *
     * @param string      $username    (required)
     * @param null|string $after       (optional)
     * @param null|string $before      (optional)
     * @param null|int    $limit       (optional, default to 25)
     * @param string      $contentType The value for the Content-Type header. Check self::contentTypes['getSaved'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getSavedAsync($username, $after = null, $before = null, $limit = 25, string $contentType = self::contentTypes['getSaved'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->getSavedAsyncWithHttpInfo($username, $after, $before, $limit, $contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getSavedAsyncWithHttpInfo.
     *
     * Get user saved things
     *
     * @param string      $username    (required)
     * @param null|string $after       (optional)
     * @param null|string $before      (optional)
     * @param null|int    $limit       (optional, default to 25)
     * @param string      $contentType The value for the Content-Type header. Check self::contentTypes['getSaved'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getSavedAsyncWithHttpInfo($username, $after = null, $before = null, $limit = 25, string $contentType = self::contentTypes['getSaved'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Sigwin\RedditClient\Model\ListingEnvelope';
        $request = $this->getSavedRequest($username, $after, $before, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'getSaved'.
     *
     * @param string      $username    (required)
     * @param null|string $after       (optional)
     * @param null|string $before      (optional)
     * @param null|int    $limit       (optional, default to 25)
     * @param string      $contentType The value for the Content-Type header. Check self::contentTypes['getSaved'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function getSavedRequest($username, $after = null, $before = null, $limit = 25, string $contentType = self::contentTypes['getSaved'][0]): Request
    {
        // verify the required parameter 'username' is set
        if ($username === null || (\is_array($username) && \count($username) === 0)) {
            throw new \InvalidArgumentException('Missing the required parameter $username when calling getSaved');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UserApi.getSaved, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling UserApi.getSaved, must be bigger than or equal to 0.');
        }

        $resourcePath = '/user/{username}/saved';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{username}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (mb_stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation me.
     *
     * Returns the identity of the current user.
     *
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['me'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function me(string $contentType = self::contentTypes['me'][0]): \Sigwin\RedditClient\Model\UserData
    {
        [$response] = $this->meWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation meWithHttpInfo.
     *
     * Returns the identity of the current user.
     *
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['me'] to see the possible values for this operation
     *
     * @return array of \Sigwin\RedditClient\Model\UserData, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws \InvalidArgumentException
     * @throws ApiException              on non-2xx response or if the response body is not in the expected format
     */
    public function meWithHttpInfo(string $contentType = self::contentTypes['me'][0]): array
    {
        $request = $this->meRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            } catch (ConnectException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), null, null);
            }

            $statusCode = $response->getStatusCode();

            switch ($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Sigwin\RedditClient\Model\UserData',
                        $request,
                        $response,
                    );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            return $this->handleResponseWithDataType(
                '\Sigwin\RedditClient\Model\UserData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sigwin\RedditClient\Model\UserData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation meAsync.
     *
     * Returns the identity of the current user.
     *
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['me'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function meAsync(string $contentType = self::contentTypes['me'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        return $this->meAsyncWithHttpInfo($contentType)
            ->then(
                static function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation meAsyncWithHttpInfo.
     *
     * Returns the identity of the current user.
     *
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['me'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function meAsyncWithHttpInfo(string $contentType = self::contentTypes['me'][0]): \GuzzleHttp\Promise\PromiseInterface
    {
        $returnType = '\Sigwin\RedditClient\Model\UserData';
        $request = $this->meRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                static function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                static function ($exception): void {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'me'.
     *
     * @param string $contentType The value for the Content-Type header. Check self::contentTypes['me'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     */
    public function meRequest(string $contentType = self::contentTypes['me'][0]): Request
    {
        $resourcePath = '/api/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (mb_stripos($headers['Content-Type'], 'application/json') !== false) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (! empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    private function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (! $options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); // stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, \JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(\sprintf('Error JSON decoding server response (%s)', $request->getUri()), $response->getStatusCode(), $response->getHeaders(), $content);
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders(),
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
